/*
 * Copyright (c) 2000 Apple Computer, Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * The contents of this file constitute Original Code as defined in and
 * are subject to the Apple Public Source License Version 1.1 (the
 * "License").  You may not use this file except in compliance with the
 * License.  Please obtain a copy of the License at
 * http://www.apple.com/publicsource and read it before using this file.
 * 
 * This Original Code and all software distributed under the License are
 * distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT.  Please see the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * @APPLE_LICENSE_HEADER_END@
 */
/*
 * @OSF_COPYRIGHT@
 */
subsystem
#if	KERNEL_SERVER
	KernelServer
#endif	/* KERNEL_SERVER */
		bootstrap 1000001;  /* 999999 + 2 skips */

#include <mach/std_types.defs>
#include <mach/mach_types.defs>

ServerPrefix do_;

/*
 * Objects to references of type bootstrap_t are returned by:
 *	task_get_special_port(task_t,...);
 *	task_get_bootstrap(task_t,...);
 */

/*
 *	A task can make this call on its bootstrap port
 *	to get its privileged ports.
 */
routine bootstrap_ports(
		bootstrap		: bootstrap_t;
	out	priv_host		: mach_port_t;
	out	device_master		: mach_port_t;
	out	wired_ledger		: mach_port_t;
	out	paged_ledger		: mach_port_t;
	out	host_security		: mach_port_t);

/*
 *	A task can use this call to get its argument strings.
 */
routine bootstrap_arguments(
		bootstrap		: bootstrap_t;
		task			: task_t;
	out	arguments		: pointer_t, Dealloc);

/*
 *	A task can use this call to get its environment strings.
 */
routine bootstrap_environment(
		bootstrap		: bootstrap_t;
		task			: task_t;
	out	environment		: pointer_t, Dealloc);

/*
 *	A task can use this call to indicate to its bootstrapper that it
 *	is done with its startup processing.  This call is used when the
 *	task is important enough so that the bootstrap process wants to
 *	wait for it to come up before continuing with other things.
 */
simpleroutine bootstrap_completed(
		bootstrap		: bootstrap_t;
		task			: task_t);

