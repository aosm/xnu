/*
 * Copyright (c) 2000 Apple Computer, Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * The contents of this file constitute Original Code as defined in and
 * are subject to the Apple Public Source License Version 1.1 (the
 * "License").  You may not use this file except in compliance with the
 * License.  Please obtain a copy of the License at
 * http://www.apple.com/publicsource and read it before using this file.
 * 
 * This Original Code and all software distributed under the License are
 * distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT.  Please see the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * @APPLE_LICENSE_HEADER_END@
 */
/*
 * @OSF_COPYRIGHT@
 * 
 */
/*
 *	File: mach/semaphore.defs
 *	Author: Joseph CaraDonna
 *
 *	Exported kernel calls	
 *
 */

subsystem
#if	KERNEL_SERVER
	KernelServer
#endif	/* KERNEL_SERVER */
			semaphore 617200;

#include <mach/std_types.defs>
#include <mach/mach_types.defs>
#include <mach/clock_types.defs>

/*
 * a semaphore_t is created and destroyed through the task object.
 *      semaphore_create(task_t,&semaphore_t,...);
 *      semaphore_destroy(task_t,semaphore_t);
 */

routine semaphore_signal(
		semaphore	: semaphore_t);

routine semaphore_signal_all(
		semaphore	: semaphore_t);

routine semaphore_wait(
		semaphore	: semaphore_t);


routine semaphore_signal_thread(
		semaphore	: semaphore_t;
		thread		: thread_act_t);

routine semaphore_timedwait(
		semaphore	: semaphore_t;
		wait_time	: mach_timespec_t);

routine semaphore_wait_signal(
		wait_semaphore	: semaphore_t;
		signal_semaphore: semaphore_t);

routine semaphore_timedwait_signal(
		wait_semaphore	: semaphore_t;
		signal_semaphore: semaphore_t;
		wait_time	: mach_timespec_t);
